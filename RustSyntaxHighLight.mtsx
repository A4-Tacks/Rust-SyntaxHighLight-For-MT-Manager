{
    // @author: A4-Tacks
    // @email: wdsjxhno1001@163.com
    // @last-edit-date: ...
    // @repo: https://github.com/A4-Tacks/Rust-SyntaxHighLight-For-MT-Manager
    name: ["Rust", ".rs"],
    hide: false,

    styles: [
        "preproc"           > "label",
        "funcname"          > "tagName",
        "typename"          > "type",
        "path-delim"        > "operator",
        "doc-comment"       > "namespace"
    ],

    // default format comment
    comment: {
        startsWith: "//",
        insertSpace: true,
        addToContains: false, // 不高亮
    },
    // long comment
    comment: {
        startsWith: "/*",
        endsWith: "*/",
        insertSpace: false,
        addToContains: false, // 不高亮
    },

    defines: [
        "ident-continue": /[^\x00-\x20!"#$%&'()*+,\-.\/:;<=>?@\[\]^`{|}~]/
        "norm-ident": /(?:\b_/+include("ident-continue")+/+\b|\b(?![\d_])/+include("ident-continue")+/+\b)/
        "ident": /(?:r#)?/ + include("norm-ident")
        "sip-str": /(?:"(?:[^"\\]|\\.)*"|'[^'\\]'|'\\.')/
        "sip-bounded": /\s*(?:[^(){}\[\]"';]|/+include("sip-str")+/|\(\))*(?:\(\))?\s*/
        "sip-val": /(?:(?:[^(){}\[\]"',;]|/+include("sip-str")+/|\{/+include("sip-bounded")+/\}|\[/+include("sip-bounded")+/\]|\((?:\(\)|\(/+include("sip-bounded")+/\)|/+include("sip-bounded")+/)?\))+)/
        "isuf": /(?:[iu](?:8|16|32|64|128|size)\b)/
        "fsuf": /(?:f(?:16|32|64|128)\b)/
        "nsuf": /(?:/+include("isuf")+/|/+include("fsuf")+/)/

        "todo": {
            match: keywordsToRegex("TODO FIXME XXX NB NOTE SAFETY")
            0: "variable"
        }
        "rust-derive-trait": {match: keywordsToRegex(
            "Clone Hash RustcEncodable RustcDecodable Encodable Decodable"
            "PartialEq Eq PartialOrd Ord Rand Show Debug Default"
            "FromPrimitive Send Sync Copy"
        ), 0: "variable"}
        "attribute-proc-macro-item": [
            {include: "comments"}
            {include: "strings"}
            {
                start: {match: /\bderive\(/}
                end: {match: /\)/}
                contains: [
                    {include: "attribute-proc-macro-item"}
                    {include: "rust-derive-trait"}
                ]
            }
            {
                start: {match: /\(/}
                end: {match: /\)|(?=[\]}])/}
                contains: [{include: "attribute-proc-macro-item"}]
            }
            {
                start: {match: /\[/}
                end: {match: /\]|(?=[)}])/}
                contains: [{include: "attribute-proc-macro-item"}]
            }
            {
                start: {match: /\{/}
                end: {match: /\}|(?=[)\]])/}
                contains: [{include: "attribute-proc-macro-item"}]
            }
            {include: "decl-macro-meta"}
        ]
        "comments": [
            { // doc comment
                match: /\/\/[!\/].*(?:\n|$)/,
                0: "doc-comment",
                0: {include: "todo"}
            },
            { // comment
                match: /\/\/.*(?:\n|$)/,
                0: "comment",
                0: {include: "todo"}
            },
            { // zero length long comment
                match: /\/\*\*\//,
                0: "comment",
                0: {include: "todo"}
            },
            { // long doc comment
                start: {match: /\/\*[*!]/},
                end: {match: /\*\//},
                style: "doc-comment",
                contains: [{include: "todo"}]
            },
            { // long comment
                start: {match: /\/\*/},
                end: {match: /\*\//},
                style: "comment",
                contains: [{include: "todo"}]
            },
        ]
        "string-escape": {
            match: /(?:(\\(?:u\{(?:[_a-fA-F\d]_*){1,6}\}/
                + /|x[a-fA-F\d]{2}|[nrt\\0"'\r\n]))|(\\.))/,
            1: "strEscape",
            2: "error",
        }
        "format-template": [
            {
                match: /\{\{|\}\}/
                0: "strEscape"
            }
            {
                match: /\{([^:{}]*)((:)(?:.([<^>]))?[^}]*)?\}/
                0: "preproc"
                1: "default"
                2: "default"
                2: {match: /(?:/+include("norm-ident")+/|0|[1-9]\d*)\$/, 0: "preproc"}
                2: {match: /(?:[xX]\?|\?|[oxXpbeE])$/, 0: "keyword"}
                3: "preproc"
                4: "keyword"
            }
        ]
        "format-macro-template-string": [
            {
                start: {match: /[bc]?"/},
                end: {match: /"/},
                style: "string",
                contains: [
                    {include: "string-escape"}
                    {include: "format-template"}
                ],
            },
            {
                start: {match: /[bc]?r"/},
                end: {match: /"/},
                style: "string",
                contains: [
                    {include: "format-template"}
                ],
            },
            {
                start: {match: /[bc]?r#"/},
                end: {match: /"#/},
                style: "string",
                contains: [
                    {include: "format-template"}
                ],
            },
            {
                start: {match: /[bc]?r##"/},
                end: {match: /"##/},
                style: "string",
                contains: [
                    {include: "format-template"}
                ],
            },
            {
                start: {match: /[bc]?r###"/},
                end: {match: /"###/},
                style: "string",
                contains: [
                    {include: "format-template"}
                ],
            },
            {
                start: {match: /[bc]?r####"/},
                end: {match: /"####/},
                style: "string",
                contains: [
                    {include: "format-template"}
                ],
            },
            {
                start: {match: /[bc]?r#####"/},
                end: {match: /"#####/},
                style: "string",
                contains: [
                    {include: "format-template"}
                ],
            },
        ]
        "strings": [
            { // double quoted string
                start: {match: /[bc]?"/},
                end: {match: /"/},
                style: "string",
                contains: [{include: "string-escape"}],
            },
            { // raw string
                start: {match: /[bc]?r"/},
                end: {match: /"/},
                style: "string",
            },
            { // raw string tag......
                start: {match: /[bc]?r#"/},
                end: {match: /"#/},
                style: "string",
            },
            { // raw string tag......
                start: {match: /[bc]?r##"/},
                end: {match: /"##/},
                style: "string",
            },
            { // raw string tag......
                start: {match: /[bc]?r###"/},
                end: {match: /"###/},
                style: "string",
            },
            { // raw string tag......
                start: {match: /[bc]?r####"/},
                end: {match: /"####/},
                style: "string",
            },
            { // raw string tag......
                start: {match: /[bc]?r#####"/},
                end: {match: /"#####/},
                style: "string",
            },
            { // raw string tag......
                start: {match: /[bc]?r######"/},
                end: {match: /"######/},
                style: "string",
            },
            { // raw string tag......
                start: {match: /[bc]?r#######"/},
                end: {match: /"#######/},
                style: "string",
            },
            { // raw string tag......
                start: {match: /[bc]?r########"/},
                end: {match: /"########/},
                style: "string",
            },
            { // raw string tag......
                start: {match: /[bc]?r#########"/},
                end: {match: /"#########/},
                style: "string",
            },
            { // raw string tag......
                start: {match: /[bc]?r##########"/},
                end: {match: /"##########/},
                style: "string",
            },

            { // char
                match: /b?'(?:(\\(?:u\{(?:[_a-fA-F\d]_*){1,6}\}|x[a-fA-F\d]{2}|[nrt\\0"']))|(\\.)|[^\\])'/,
                0: "string",
                1: "strEscape",
                2: "error",
            },
        ]
        "decl-macro-meta": [
            { // macro meta var
                match: /\$/ + include("ident"),
                0: "preproc",
            },
            { // macro meta braces
                match: /\$(?=[({])/,
                0: "preproc",
            },
        ]
        "format-macros": [
            { // formats template string
                group: link
                contains: [
                    {
                        match: /(/ + keywordsToRegex(
                            "format format_args format_args_nl const_format_args"
                            "print println eprint eprintln"
                            "panic todo unimplemented unreachable"
                        ) + /!)\(\s*/
                        // NOTE: 未来不要将此纳入 TokenTree 的匹配, 因为这造成了括号高亮不平衡
                        1: "preproc"
                    }
                    {include: "format-macro-template-string"}
                ]
            }

            { // formats (write & assert) template string
                group: link
                contains: [
                    {
                        match: /\b((?:write(?:ln)?|assert|debug_assert)!)\(\s*(/+include("sip-val")+/),\s*/
                        1: "preproc"
                        2: {include: "top"}
                    }
                    {include: "format-macro-template-string"}
                ]
            }

            { // formats (assert_eq) template string
                group: link
                contains: [
                    {
                        match: /\b((?:(?:debug_)?assert_(?:eq|ne|matches))!)\(\s*(/+include("sip-val")+/,\s*/+include("sip-val")+/),\s*/
                        1: "preproc"
                        2: {include: "top"}
                    }
                    {include: "format-macro-template-string"}
                ]
            }
        ]
        "top": [
            {include: "comments"}
            {include: "format-macros"}
            {include: "strings"}

            { // literal neg
                match: /-(?=\d)/,
                0: "operator"
            }

            { // number
                match: /\b0(?:x[_a-fA-F\d]+|o[_0-7]+|b[_01]+)/+include("isuf")+/?/
                    + /|\b\d[_\d]*\.(?!\d)/
                    + /|\b\d[_\d]*(?:\.\d[_\d]*)?(?:/+include("nsuf")+/|[eE][+-]?[_\d]+/+include("fsuf")+/?)?/,
                0: "number",
            }

            { // raw ident
                match: /r#/ + include("norm-ident") + /(?!::|[!\(])/
            }

            { // function define
                match: /\b(fn)\s+(/+include("ident")+/)/,
                1: "keyword",
                2: "funcname",
            },
            { // weak union keyword
                match: /\b(union)\s+(/+include("ident")+/)/,
                1: "keyword",
                2: "typename",
            },
            { // weak default keyword
                match: /\b(default)\s+(?=(?:(?:unsafe\s+)?impl|(?:async\s+)?(?:gen\s+)?(?:unsafe\s+)?(?:safe\s+)?(?:fn|extern)|type|const)\b)/,
                1: "keyword",
            },
            { // weak safe keyword
                match: /\b(safe)\s+(?=(?:static|fn|extern)\b)/,
                1: "keyword",
            },
            { // weak auto keyword
                match: /\b(auto)\s+(?=trait\b)/,
                1: "keyword",
            },
            { // weak gen keyword
                match: /\b(gen)(?=\s+(?:unsafe\s+)?(?:safe\s+)?(?:fn|extern)\b|\s*(?:\bmove\s*)?[\{|])/,
                1: "keyword",
            },
            { // weak &raw const|mut keyword
                match: /(&)\s*(raw)\s+(?=(?:const|mut)\b)/,
                1: "operator",
                2: "keyword",
            },
            { // reserved keywords
                match: keywordsToRegex(
                    "abstract become box do final override"
                    "priv typeof unsized virtual become"
                ),
                0: "error",
            },
            { // strict keywords
                match: keywordsToRegex(
                    "as break const continue crate dyn"
                    "else enum extern false fn for"
                    "if impl in let loop match"
                    "mod move mut pub ref return"
                    "static struct super trait"
                    "true type unsafe use where while"
                    "async await macro try yield"),
                0: "keyword",
            },
            { // type
                match: keywordsToRegex(
                "bool char"
                "fn"
                "str"
                "f16 f32 f64 f128"
                "i8 i16 i32 i64 i128 isize"
                "u8 u16 u32 u64 u128 usize"),
                0: "type",
            },
            { // 被预导入的结构体与特征等 (取材自 Rust 2024 edition)
                match: keywordsToRegex(
                    "Send Sized Sync Unpin Drop Fn FnMut FnOnce AsMut AsRef"
                    "From Into DoubleEndedIterator ExactSizeIterator Extend"
                    "IntoIterator Iterator Clone Copy Default Eq Ord PartialEq"
                    "PartialOrd ToOwned ToString TryFrom TryInto FromIterator"
                    "Box String Vec Option None Some Result Err Ok Future IntoFuture"
                    "AsyncFn AsyncFnMut AsyncFnOnce"
                ),
                0: "variable",
            },
            { // Self type
                match: /\bSelf\b/,
                0: "variable",
            },
            { // self value
                match: /\bself\b/,
                0: "constant",
            },

            { // path-delim
                match: /::/,
                0: "path-delim",
            },
            { // module like path (type)
                match: include("ident") + /(?=::[^<])/,
                0: "namespace",
            },
            { // call function and Turbofish
                match: include("ident") + /(?=::<|\()/,
                0: "funcname",
            },
            { // call macro
                match: include("ident") + /!(?!=)/,
                0: "preproc",
            },
            {include: "decl-macro-meta"}
            { // attribute proc-macro ident
                match: /#/ + include("ident"),
                0: "preproc",
            },
            { // attribute proc-macro
                start: {match: /#!?\[/},
                end: {match: /\]/},
                style: "preproc",
                contains: [
                    {include: "attribute-proc-macro-item"},
                ]
            },
            { // loop label
                match: /'/+include("ident")+/:/,
                0: "label"
            },
            { // lifetime
                match: /'(?:/+include("ident")+/|_\b)(?!')/,
                0: "meta"
            },

            { // 一些突出符号
                match: /([?]|&&|\|\|(?![ \t]*(?:\{|->))(?<!(?:[=(|,;]|\b(?:const|static|async|gen|move)|=>) ?\|\|)|\.(?=await\b|\d))|([@|](?!=)|[=\-]>)/,
                1: "keyword",
                2: "operator",
            },
            { // 比较相关运算符
                match: /[<!>=]=|[<>]/,
                0: "operator"
            }
            { // 一些前导符号
                match: /([&~@*])(?![)= \s])/,
                1: "operator",
            },
            { // 一些运算及赋值
                match: /[+\-*\/%^&|]=?|=/
                0: "keyword2",
            }
        ]
    ]

    contains: [
        { // rust shebang
            match: /^#![^\[\r\n][^\r\n]*/,
            0: "comment"
        }
        {include: "top"}
    ],
}
